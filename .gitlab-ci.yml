stages:
  - package
  - s2-package
  - s2-service

#
# package
package:
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  stage: package
  image: maven:3.6.3-jdk-8
  script:
    - GPG_FILE=`find / -name xuxiaowei_0x97A36125_SECRET`
    - echo $GPG_FILE
    - gpg --import $GPG_FILE
    - SETTINGS_FILE=`find / -name settings.xml`
    - echo $SETTINGS_FILE
    - sed -i "s#</servers>#<server><id>ossrh</id><username>$ossrh_user</username><password>$ossrh_pass</password></server>&#" $SETTINGS_FILE
    - git --version
    - echo 常量网址：https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - echo 当前分支：$CI_COMMIT_BRANCH
    - echo 分支上存在的上一个最新提交：$CI_COMMIT_BEFORE_SHA
    - echo 分支上存在的上一个最新提交前八个字符：$CI_COMMIT_SHORT_SHA
    - echo ISO8601格式的提交时间戳：$CI_COMMIT_TIMESTAMP
    - echo "Name<email>格式提交的作者：$CI_COMMIT_AUTHOR"
    - echo 主分支：$CI_DEFAULT_BRANCH
    - echo 项目路径：$CI_PROJECT_DIR
    - echo 单个执行器中构建执行的唯一ID：$CI_CONCURRENT_ID
    - echo 单个执行器和项目中构建执行的唯一ID：$CI_CONCURRENT_PROJECT_ID
    - echo 作业是否手动启动：$CI_JOB_MANUAL
    - echo 作业的名称：$CI_JOB_NAME
    - echo 作业阶段的名称：$CI_JOB_STAGE
    - echo 作业开始时的UTC日期时间，采用ISO8601格式：$CI_JOB_STARTED_AT
    - echo 创建管道时的UTC日期时间，采用ISO8601格式：$CI_PIPELINE_CREATED_AT
    - echo 当前项目的ID，此ID在GitLab实例上的所有项目中都是唯一的：$CI_PROJECT_ID
    - echo 作业的项目命名空间（用户名或组名）：$CI_PROJECT_NAMESPACE
    - echo 项目目录的名称：$CI_PROJECT_NAME
    - echo 包含项目名称的项目命名空间：$CI_PROJECT_PATH
    - echo GitLab实例的主要版本：$CI_SERVER_VERSION_MAJOR
    - echo GitLab实例的次要版本：$CI_SERVER_VERSION_MINOR
    - echo GitLab实例的补丁版本：$CI_SERVER_VERSION_PATCH
    - echo GitLab实例的完整版本：$CI_SERVER_VERSION
    - echo 开始作业的用户的电子邮件：$GITLAB_USER_EMAIL
    - echo 启动作业的用户的ID：$GITLAB_USER_ID
    - echo 启动作业的用户的用户名：$GITLAB_USER_LOGIN
    - echo 启动作业的用户的名称：$GITLAB_USER_NAME
    - echo 合并请求的实例级ID，这是GitLab上所有项目的唯一ID：$CI_MERGE_REQUEST_ID
    - echo 合并请求的项目级IID（内部ID），此ID对于当前项目是唯一的：$CI_MERGE_REQUEST_IID
    - echo 作业详细信息URL：$CI_JOB_URL
    - echo 作业的内部ID，在GitLab实例中的所有作业中是唯一的：$CI_JOB_ID
    - echo 正在使用的Runner的唯一ID：$CI_RUNNER_ID
    - echo 运行作业的GitLabRunner的版本：$CI_RUNNER_VERSION
    - echo 管道详细信息的URL：$CI_PIPELINE_URL
    - echo 当前管道的实例级ID。此ID在GitLab实例上的所有项目中都是唯一的：$CI_PIPELINE_ID
    - echo 当前管道的项目级IID（内部ID），此ID仅在当前项目中是唯一的：$CI_PIPELINE_IID
    - echo GitLab实例URL的主机，没有协议或端口：$CI_SERVER_HOST
    - echo 项目的HTTP（S）地址：$CI_PROJECT_URL
    - echo 克隆Git存储库的URL：$CI_REPOSITORY_URL
    - wget --version
    - mvn clean -e -U package source:jar javadoc:jar install -Paliyun -Pgpg -DskipTests && PACKAGE_FLAG=1
    - if [ "$PACKAGE_FLAG" == "1" ]; then echo '打包完成'; else echo '打包失败' && xxxx; fi
  cache:
    paths:
      - .m2/repository
      - passport-ui/node/
      - passport-ui/node_modules/
      - ui/node/
      - ui/node_modules/
  artifacts:
    name: package
    paths:
      - target/*.jar
      - target/*.asc
      - target/*.pom
      - "*/target/*.jar"
      - "*/target/*.asc"
      - "*/target/*.pom"
      - "*/*/target/*.jar"
      - "*/*/target/*.asc"
      - "*/*/target/*.pom"
      - ui/dist
  only:
    - main

#
# s2 打包
s2-package:
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  stage: s2-package
  image: maven:3.6.3-jdk-8
  script:
    - GPG_FILE=`find / -name xuxiaowei_0x97A36125_SECRET`
    - echo $GPG_FILE
    - gpg --import $GPG_FILE
    - SETTINGS_FILE=`find / -name settings.xml`
    - echo $SETTINGS_FILE
    - sed -i "s#</servers>#<server><id>ossrh</id><username>$ossrh_user</username><password>$ossrh_pass</password></server>&#" $SETTINGS_FILE
    - git --version
    - echo 常量网址：https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - echo 当前分支：$CI_COMMIT_BRANCH
    - echo 主分支：$CI_DEFAULT_BRANCH
    - echo 项目路径：$CI_PROJECT_DIR
    - mvn clean -e -U package source:jar javadoc:jar install -Paliyun -Pgpg -DskipTests && PACKAGE_FLAG=1
    - if [ "$PACKAGE_FLAG" == "1" ]; then echo '打包完成'; else echo '打包失败' && xxxx; fi
  cache:
    paths:
      - .m2/repository
      - passport-ui/node/
      - passport-ui/node_modules/
      - ui/node/
      - ui/node_modules/
  artifacts:
    paths:
      - target/*.jar
      - target/*.asc
      - target/*.pom
      - "*/target/*.jar"
      - "*/target/*.asc"
      - "*/target/*.pom"
      - "*/*/target/*.jar"
      - "*/*/target/*.asc"
      - "*/*/target/*.pom"
      - ui/dist
  only:
    - s2

# 阿里云对象存储
oss:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - wget https://gosspublic.alicdn.com/ossutil/1.7.13/ossutil64
    - echo '[Credentials]' > .ossutilconfig
    - echo 'language=CH' >> .ossutilconfig
    - echo 'endpoint=$endpoint' >> .ossutilconfig
    - echo 'accessKeyID=$accessKeyID' >> .ossutilconfig
    - echo 'accessKeySecret=$accessKeySecret' >> .ossutilconfig
    - echo 根据要储存文件名的特点查找文件（排除.m2文件夹）
    - for file in $(find . -path ./.m2 -prune -name *-*-*.pom -o -name *-*-*.jar -o -name *-*-*.*.asc); do echo $file; ./ossutil64 -c .ossutilconfig -u cp $file oss://private-xuxiaowei/$CI_SERVER_HOST/$CI_PROJECT_PATH/$CI_JOB_ID/artifacts/${file#*target}; done
  only:
    - s2

#
# s2 发布网关服务
s2-gateway:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - MODULE='gateway'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布监控（管理）服务
s2-admin-server:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - MODULE='admin-server'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布授权服务
s2-authorization-server:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - MODULE='authorization-server'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布登录服务
s2-passport:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - MODULE='passport'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布审计服务
s2-audit:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - cd resource-services-parent
    - pwd
    - MODULE='audit'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布MySQL二进制订阅服务
s2-canal:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - cd resource-services-parent
    - pwd
    - MODULE='canal'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布用户服务
s2-user:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - JAR_PATH=/home/gitlab-runner/jar/$CI_COMMIT_BRANCH
    - echo JAR_PATH：$JAR_PATH
    - if [ ! -f $JAR_PATH ]; then sudo mkdir $JAR_PATH -p && echo 创建发布文件夹完成; fi
    - cd resource-services-parent
    - pwd
    - MODULE='user'
    - echo MODULE：$MODULE
    - ARTIFACT_ID=`mvn -e -U help:evaluate -pl $MODULE -Dexpression=project.artifactId -q -DforceStdout`
    - VERSION=`mvn help:evaluate -pl $MODULE -Dexpression=project.version -q -DforceStdout`
    - PACKAGING=`mvn help:evaluate -pl $MODULE -Dexpression=project.packaging -q -DforceStdout`
    - APP_NAME=$ARTIFACT_ID-$VERSION.$PACKAGING
    - echo APP_NAME：$APP_NAME
    - cp $MODULE/target/$APP_NAME $JAR_PATH/$APP_NAME && echo 复制新jar包完成
    - SERVICE=/usr/lib/systemd/system/$MODULE.service
    - echo SERVICE：$SERVICE
    - JAVA_HOME=/software/dragonwell-8.10.11
    - echo JAVA_HOME：$JAVA_HOME
    - echo "" > $SERVICE
    - echo "[Unit]" >> $SERVICE
    - echo "Description=$MODULE" >> $SERVICE
    - echo "After=syslog.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Service]" >> $SERVICE
    - echo "EnvironmentFile=/etc/profile" >> $SERVICE
    - echo "ExecStart=$JAVA_HOME/bin/java -jar $JAR_PATH/$APP_NAME --spring.profiles.active=prod" >> $SERVICE
    - echo "" >> $SERVICE
    - echo "[Install]" >> $SERVICE
    - echo "WantedBy=multi-user.target" >> $SERVICE
    - echo "" >> $SERVICE
    - echo 创建新启动脚本完成
    - sudo systemctl enable $MODULE.service && echo 设置开机启动完成
    - sudo systemctl daemon-reload
    - sudo systemctl restart $MODULE.service && echo 重启项目完成
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
    - MODULE_STATUS=0
    - sleep 30 && echo 增加延时
    - sudo systemctl status $MODULE.service && MODULE_STATUS=1
    - if [ "$MODULE_STATUS" == "1" ]; then echo '延时查看项目状态成功'; else echo '查看项目状态失败' && xxxx; fi
  tags:
    - s2
  only:
    - s2

#
# s2 发布UI服务
s2-ui:
  stage: s2-service
  needs:
    - job: s2-package
      artifacts: true
  script:
    - MODULE='ui'
    - echo MODULE：$MODULE
    - RELEASE_PATH=/home/gitlab-runner/node/$MODULE
    - if [ ! -f $RELEASE_PATH ]; then sudo mkdir $RELEASE_PATH -p && echo 创建文件夹完成; fi
    - echo RELEASE_PATH：$RELEASE_PATH
    - if [ ! -f $RELEASE_PATH ]; then sudo mkdir $RELEASE_PATH -p && echo 创建发布文件夹完成; fi
    - cp -r ./$MODULE/dist/* $RELEASE_PATH && echo 复制新文件夹完成
  tags:
    - s2
  only:
    - s2
